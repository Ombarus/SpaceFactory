[gd_resource type="Shader" format=3 uid="uid://chxyfwdkhe2k"]

[resource]
code = "shader_type spatial;

uniform vec3 BColor : source_color = vec3(1.0, 1.0, 1.0);
uniform sampler2D Diffuse;
uniform float DiffuseDesat = 0.0;
uniform sampler2D Emissive;
uniform vec3 GColor : source_color = vec3(1.0, 1.0, 1.0);
uniform float LightIntensity = 0.0;
uniform sampler2D Mask;
uniform float MetallicBlue = 0.7;
uniform float MetallicGreen = 0.7;
uniform float MetallicOther = 0.5;
uniform float MetallicRed = 1.0;
uniform float DetailU = 5.0;
uniform float DetailV = 5.0;
uniform sampler2D Normal;
uniform vec3 OtherColor : source_color = vec3(1.0, 1.0, 1.0);
uniform vec3 RColor : source_color = vec3(1.0, 1.0, 1.0);
uniform float RDetailU = 2.0;
uniform float RDetailV = 2.0;
uniform float RoughnessBlendContrast = 0.0;
uniform sampler2D RoughnessBlendMask;
uniform float RoughnessBlue = 0.5;
uniform float RoughnessGreen = 0.5;
uniform float RoughnessOther = 0.5;
uniform float RoughnessRed = 0.1;
uniform float SpecBlue = 0.5;
uniform float SpecGreen = 0.5;
uniform float SpecOther = 0.5;
uniform float SpecRed = 0.5;

uniform sampler2D TextureSample;
uniform sampler2D MaskDiff;


vec3 desat(vec3 col, float desat_value)
{
	return mix(col.rgb, vec3(dot(col.rgb, vec3(0.299, 0.587, 0.114))), desat_value);
}

vec3 cheap_contrast_rgb(float input_contrast, vec3 input_color)
{
	vec3 s = vec3(0.0 - input_contrast);
	vec3 a = vec3(input_contrast + 1.0);
	vec3 res = clamp(mix(s, a, input_color), vec3(0), vec3(1));
	return res;
}



void fragment() {
	// Diffuse Color
	vec3 diffuse = texture(Diffuse, UV).rgb;
	diffuse = desat(diffuse, DiffuseDesat);
	vec3 rcol_diff = diffuse * RColor;
	vec3 mask_diff = texture(MaskDiff, UV).rgb;
	rcol_diff = mix(rcol_diff, diffuse, mask_diff.r);
	vec3 gcol_diff = diffuse * GColor;
	gcol_diff = mix(gcol_diff, rcol_diff, mask_diff.g);
	vec3 bcol_diff = diffuse * BColor;
	bcol_diff = mix(bcol_diff, gcol_diff, mask_diff.b);
	float other_diff_a = mask_diff.r + mask_diff.g + mask_diff.b;
	vec3 other_diff = diffuse * OtherColor;
	other_diff = mix(bcol_diff, other_diff, other_diff_a);
	ALBEDO = other_diff;
	
	// Metallic
	vec3 mask = texture(Mask, UV).rgb;
	float metallic = mix(MetallicRed, MetallicOther, mask.r);
	metallic = mix(MetallicGreen, metallic, mask.g);
	metallic = mix(MetallicBlue, metallic, mask.b);
	METALLIC = metallic;
	
	// Specular
	float spec = mix(SpecRed, SpecOther, mask.r);
	spec = mix(SpecGreen, spec, mask.g);
	spec = mix(SpecBlue, spec, mask.b);
	SPECULAR = spec;
	
	// Light
	vec3 emissive = texture(Emissive, UV).rgb;
	emissive = emissive * LightIntensity;
	EMISSION = emissive;
	
	// Roughness
	vec2 rough_uv = UV * vec2(RDetailU, RDetailV);
	vec3 rough_mask = texture(RoughnessBlendMask, rough_uv).rgb;
	float roughness = mix(RoughnessRed, RoughnessOther, mask.r);
	roughness = mix(RoughnessGreen, roughness, mask.g);
	roughness = mix(RoughnessBlue, roughness, mask.b);
	rough_mask = cheap_contrast_rgb(RoughnessBlendContrast, rough_mask);
	roughness = roughness * rough_mask.r;
	ROUGHNESS = roughness;
	
	// Detail + Normal
	vec2 norm_uv = UV * vec2(DetailU, DetailV);
	vec3 sample_col = texture(TextureSample, norm_uv).rgb;
	sample_col = sample_col * vec3(1.0, 1.0, 0.0);
	vec3 norm_col = texture(Normal, UV).rgb;
	float l = length(norm_col + sample_col);
	NORMAL_MAP = (sample_col + norm_col) / l;
}
"
